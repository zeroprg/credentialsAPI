swagger: '2.0'
info:
  version: '0.0.1'
  title: CredentialsAPI
  description: Documenation content
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: localhost
basePath: /credentialsAPI
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /signin:
    get:
      description: Secured token which stored by browser, used to authenticate in default mode. By filling in the form and pressing the "Sign In" button at the sign-in page (/signin), an AJAX GET is sent to this endpoint. You will then be redirected to the main page (/main) if the request is successful or shown an error message if it fails.
      summary: Signin
      tags:
      - signin
      operationId: SigninGet
      produces:
      - application/json
      parameters:
      - name: uuid
        in: query
        required: true
        type: string
        minLength: 8
        description: uuid used to register in system
      - name: securetoken
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: The server successfully processed the request.
        400:
          description: Bad Request
        
        401:
          description: The user does not have the necessary credentials.
        
      x-unitTests:
      - request:
          method: GET
          uri: /signin?uuid=2345345352342-09w93i53
          headers:
            securetoken: 1.2312324435645647fghfghe22
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Signin1
        x-testDescription: Secured token which stored by browser, used to authenticate in default mode. By filling in the form and pressing the "Sign In" button at the sign-in page (/signin), an AJAX GET is sent to this endpoint. You will then be redirected to the main page (/main) if the request is successful or shown an error message if it fails.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /signout:
    get:
      description: Secured token which stored by browser, used to authenticate in default mode. By tapping on the "Sign Out" button at the main page, an AJAX request is sent to this endpoint, sign out happened, then redirected to /.
      summary: Signout
      tags:
      - signout
      operationId: SignoutGet
      produces:
      - application/json
      parameters:
      - name: securetoken
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: The server successfully processed the request.
        400:
          description: Bad Request
        
        401:
          description: The user does not have the necessary credentials.
        
      x-unitTests:
      - request:
          method: GET
          uri: /signout
          headers:
            securetoken: 1.2312324435645647fghfghe22
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Signout1
        x-testDescription: Secured token which stored by browser, used to authenticate in default mode. By tapping on the "Sign Out" button at the main page, an AJAX request is sent to this endpoint, sign out happened, then redirected to /.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /unregister:
    get:
      description: By tapping on the "Unregister" button at the main page, an AJAX request is sent to this endpoint, unregister, then redirected to /.
      summary: Unregister
      tags:
      - unregister
      operationId: UnregisterGet
      produces:
      - application/json
      parameters:
      - name: uuid
        in: query
        required: true
        type: string
        description: This is uuid of user which will be uregistered
      - name: securetoken
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: The server successfully processed the request.
        400:
          description: Bad Request
        
        401:
          description: The user does not have the necessary credentials.
        
      x-unitTests:
      - request:
          method: GET
          uri: /unregister?uuid=131231242342
          headers:
            securetoken: 1.2312324435645647fghfghe22
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Unregister1
        x-testDescription: By tapping on the "Unregister" button at the main page, an AJAX request is sent to this endpoint, unregister, then redirected to /.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /password-strength:
    get:
      description: By tapping on the "Password" field at the main page, an AJAX request is sent to this endpoint to check how strong the password is. Result is itnteger from 0 to 10 /. Password send in Base64 encoding
      summary: PasswordStrength
      tags:
      - password
      operationId: PasswordStrengthGet
      produces:
      - application/json
      parameters:
      - name: password
        in: header
        required: true
        type: string
        description: How strong passord is
      responses:
        204:
          description: The server successfully processed the request and is not returning any content.
          schema:
            type: object
          examples: {}
        400:
          description: Bad Request
        
        401:
          description: The user does not have the necessary credentials.
        
      x-unitTests:
      - request:
          method: GET
          uri: /password-strength
          headers:
            password: Abracadabra
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: PasswordStrength1
        x-testDescription: By tapping on the "Password" field at the main page, an AJAX request is sent to this endpoint to check how strong the password is. Result is itnteger from 0 to 10 /. Password send in Base64 encoding
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /auth-password:
    post:
      description: By filling the form and pressing a "Login" button at the top page (/), the form will send an AJAX POST to this endpoint. Based 64 encoded username:password key pair wil be send "Authorization" header. You will be then redirected to the main page (/main) if the request is successful or will show an error message if it fails.
      summary: AuthPassword
      tags:
      - auth
      operationId: AuthPasswordPost
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: The server successfully processed the request. Return secureToken in body as plain text
          schema:
            type: object
          examples: {}
        400:
          description: Bad Request
        
        401:
          description: The user does not have the necessary credentials.
        
      x-unitTests:
      - request:
          method: POST
          uri: /auth-password
          headers:
            Authorization: 1.2312324435645647fghfghe22
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: AuthPassword1
        x-testDescription: By filling the form and pressing a "Login" button at the top page (/), the form will send an AJAX POST to this endpoint. Based 64 encoded username:password key pair wil be send "Authorization" header. You will be then redirected to the main page (/main) if the request is successful or will show an error message if it fails.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /register:
    post:
      description: By filling the form and pressing a "Regiter" button at the top page (/), the form will send an AJAX POST to this endpoint. You will be then redirected to the main page (/main) if the request is successful or will show an error message if it fails.
      summary: Register
      tags:
      - register
      operationId: RegisterPost
      produces:
      - application/json
      parameters:
      - name: username
        in: query
        required: true
        type: string
        minLength: 8
        description: This is user name
      - name: password
        in: query
        required: true
        type: string
        description: This alfa-numeric password
      responses:
        200:
          description: The server successfully processed the request. Return secureToken in body as plain text
          schema:
            type: object
          examples: {}
        400:
          description: Bad Request
        
        401:
          description: The user does not have the necessary credentials.
        
      x-unitTests:
      - request:
          method: POST
          uri: /register?username=jira12345&password=P@ssword
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Register1
        x-testDescription: By filling the form and pressing a "Regiter" button at the top page (/), the form will send an AJAX POST to this endpoint. You will be then redirected to the main page (/main) if the request is successful or will show an error message if it fails.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /oauth:
    get:
      description: By tapping on the "Sygn by others providers" field at the main page, an AJAX request is sent to this endpoint to check other provider request id.
      summary: Oauth
      tags:
      - oauth
      operationId: OauthGet
      produces:
      - application/json
      parameters:
      - name: password
        in: query
        required: true
        type: string
        description: Other provider request id
      responses:
        204:
          description: The server successfully processed the request and is not returning any content.
          schema:
            type: object
          examples: {}
        400:
          description: Bad Request
        
        401:
          description: The user does not have the necessary credentials.
        
      x-unitTests:
      - request:
          method: GET
          uri: /oauth?password=223423480294203402
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Oauth1
        x-testDescription: By tapping on the "Sygn by others providers" field at the main page, an AJAX request is sent to this endpoint to check other provider request id.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  PasswordStrength:
    title: password-strength
    description: This is password strength DataType
    type: object
    properties:
      strength:
        description: ''
        type: integer
        format: int32
    required:
    - strength
